#!/usr/bin/env bash
# Puts dotfiles in their place

# Init environment
source $HOME/.dotfiles/.dot/util/env


setup_gitconfig() {
  if ! [ -f git/gitconfig.symlink ]; then
    pprint intro 'SETTING UP GITCONFIG'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]; then
      git_credential='osxkeychain'
    fi

    pprint user 'What is your github author name?'
    read -e git_authorname
    pprint user 'What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    pprint success '.gitconfig generated'
    pprint flush
  fi
}


link_file() {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]; then
      pprint user "File already exists: $(basename "$src"), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
      read -n 1 action

      case "$action" in
        o )
          overwrite=true;;
        O )
          overwrite_all=true;;
        b )
          backup=true;;
        B )
          backup_all=true;;
        s )
          skip=true;;
        S )
          skip_all=true;;
        * )
          ;;
      esac
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]; then
      rm -rf "$dst"
      pprint success "Removed $dst"
    fi

    if [ "$backup" == "true" ]; then
      mv "$dst" "${dst}.backup"
      pprint success "Moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]; then
      pprint success "Skipped $src"
    fi
  fi

  # "false" or empty
  if [ "$skip" != "true" ]; then
    ln -s "$1" "$2"
    pprint success "Linked $1 to $2"
  fi
}


link_dotfiles() {
  pprint intro "LINKING DOTFILES TO HOME FOLDER"

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find "$DOT" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
  pprint success "All dotfiles linked"
  pprint flush
}


# First, set git author info
setup_gitconfig

# Link the dotfiles
link_dotfiles

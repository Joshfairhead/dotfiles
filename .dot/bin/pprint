#!/usr/bin/env bash
# Pretty prints for dotfiles scripts

progname=$(basename $0)
SOL='\n'
EOL=


# -- Top-level prints ----------------------------------------------------------

pp_section() {
  local pad=$(printf '%0.1s' '-'{1..80})
  local padlength=74
  local string=$2
  printf "$1\n# -- %s " "${string}"
  printf '%*.*s' 0 $((${padlength} - ${#string})) "${pad}"
  printf "%s\n$3"
}


# -- Step prints ---------------------------------------------------------------

pp_step_error() {
  printf "$1  [\033[0;31mFAIL\033[0m] $2$3"
}

pp_step_go() {
  printf "$1  [\033[0;94m == \033[0m] $2$3"
}

pp_step_ok() {
  printf "$1  [\033[0;32m OK \033[0m] $2$3"
}

pp_step_user() {
  printf "$1  [\033[0;33m ?? \033[0m] $2$3 "
}


# -- Info prints ---------------------------------------------------------------

pp_info_error() {
  printf "$1      \033[0;31m!!\033[0m $2$3"
}

pp_info_ok() {
  printf "$1      \033[0;32m>>\033[0m $2$3"
  # echo -e $3
}

pp_info_go() {
  printf "$1      .. $2$3"
}

pp_info_warn() {
  printf "$1      \033[0;33m!?\033[0m $2$3"
}


# -- Tools ---------------------------------------------------------------------

pp_remove() {
  printf '\r\033[2K'
}

pp_newline() {
  printf '\n'
}

pp_text() {
  printf "$1         $2$3"
}

# ------------------------------------------------------------------------------


usage() {
  echo "usage: ${progname} type [-n | -r] [string]"
  echo "  type:   section"
  echo "          step-error step-go step-ok step-user"
  echo "          info-error info-go info-ok info-warn"
  echo "          newline remove text"
  echo "  -n:     end with a line break"
  echo "  -r:     remove previous line break"
  echo "  string: string to be printed"
}

# Print type check
case "$1" in
  # Top-level
  section)
    TYPE="pp_section";;

  # Steps
  step-error)
    TYPE="pp_step_error";;
  step-go)
    TYPE="pp_step_go";;
  step-ok)
    TYPE="pp_step_ok";;
  step-user)
    TYPE="pp_step_user";;

  # Steps
  info-error)
    TYPE="pp_info_error";;
  info-go)
    TYPE="pp_info_go";;
  info-ok)
    TYPE="pp_info_ok";;
  info-warn)
    TYPE="pp_info_warn";;

  # Tools
  newline)
    TYPE="pp_newline";;
  remove)
    TYPE="pp_remove";;
  text)
    TYPE="pp_text";;

  *)
    usage
    exit 1;;
esac
shift

# Start of line option
if [[ $# > 1 ]]; then
  case "$1" in
    -n)
      EOL='\n'
      shift;;
    -r)
      SOL="\r\033[2K"
      shift;;
    *)
      usage
      exit 1;;
  esac
fi

# Print call
${TYPE} "${SOL}" "$1" "${EOL}"

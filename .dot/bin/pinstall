#!/usr/bin/env bash
# Pretty and quite silent package installer wrapper


# -- Core ----------------------------------------------------------------------

_pretty_install() {
  local package=$1
  local system=$2
  local cmd_install=$3
  local cmd_check=$4
  local logfile_suffix=$5
  [[ -z "${logfile_suffix}" ]] && logfile_suffix="log"
  if [[ $(_is_installed "${cmd_check}" "${package}") == false ]]; then
    pprint step "Installing ${package} from ${system}"
    ${cmd_install} ${package} > /tmp/${package}.with-${system}.${logfile_suffix} 2>&1
    if [[ $? != 0 ]]; then
      pprint error "Failed to install ${package}"
      exit 1
    fi
  fi
}

_is_installed() {
  local cmd_check=$1
  local package=$2
  local output
  local code
  output=$(${cmd_check} ${package} 2> /dev/null)
  code=$?
  [[ -z "${output}" ]] || [[ "${code}" != 0 ]] && echo false && return
  echo true
}


# -- System calls --------------------------------------------------------------

pbrew() {
  _pretty_install $1 "brew" "brew install" "brew ls --versions" $2
}

pnpm() {
  _pretty_install $1 "npm" "npm -g install" "npm -g list" $2
}

ppip() {
  _pretty_install $1 "pip" "syspip install --upgrade" "syspip show" $2
}


# ------------------------------------------------------------------------------

usage() {
  echo "usage: $0 system package [logsuffix]"
  echo "  system:    package system to use:"
  echo "               brew npm pip"
  echo "  package:   the package to be installed"
  echo "  logsuffix: suffix for the install log file"
}

case "$1" in
  brew)
    fn="pbrew";;
  npm)
    fn="pnpm";;
  pip)
    fn="ppip";;
  *)
    usage
    exit 1;;
esac

if [[ $# < 2 ]]; then
  usage
  exit 1
fi

${fn} "$2" "$3"
exit 0
